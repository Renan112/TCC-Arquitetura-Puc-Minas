version: '2.1'

volumes:
    kong_data: 

networks:
  tcc-pos-net:
    name: tcc-pos-net

services:
  kong-migrations:
    image: kong:1.1.2-alpine
    command: kong migrations bootstrap
    depends_on:
      db:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_PASSWORD: kong
      KONG_PG_USER: kong
    links:
      - db:db
    networks:
      - tcc-pos-net
    restart: on-failure
  kong:
    image: kong:1.1.2-alpine
    user: root
    depends_on:
      db:
        condition: service_healthy
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_PASSWORD: kong
      KONG_PG_USER: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
    networks:
      - tcc-pos-net
    ports:
      - "8000:8000/tcp"
      - "8001:8001/tcp"
      - "8443:8443/tcp"
      - "8444:8444/tcp"
    restart: on-failure
  db:
    image: postgres:11.2-alpine
    environment:
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_USER: kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    networks:
      - tcc-pos-net
    volumes:
      - kong_data:/var/lib/postgresql/data
  konga:
    image: pantsel/konga:0.14.1
    ports:
      - 1337:1337
    environment:
      - NODE_ENV=development #production or development | defaults to development
      - TOKEN_SECRET=teste
      - DB_ADAPTER=postgres
      - DB_HOST=db 
      - DB_USER=kong
      - DB_PASSWORD=kong
      - DB_DATABASE=kong
      - DB_PG_SCHEMA=konga
    networks: 
      - tcc-pos-net